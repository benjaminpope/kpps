#!/usr/bin/env python
"""Script to carry out transit search sensitivity tests from detrended K2 light curves.

"""
from __future__ import division
import sys
import numpy as np
import pyfits as pf
import matplotlib as mpl
mpl.use('AGG')
import matplotlib.pyplot as pl
import pandas as pd
import seaborn as sb

from os.path import join, abspath, basename, exists
from argparse import ArgumentParser
from datetime import datetime
from cPickle import dump, load
from time import sleep, time
from glob import glob
from copy import copy

from numpy import arange, zeros
from numpy.random import uniform
from mpi4py import MPI

from pytransit import MandelAgol as MA
from exotk.utils.orbits import as_from_rhop
from pybls import BLS
from exotk.utils.misc_f import utilities as uf
from exotk.utils.misc import fold
from matplotlib import rc
from collections import OrderedDict

from k2ps.psearch import *

sb.set_style('white')
sb.set_context('paper')
rc('figure', figsize=(14,5), dpi=100)
pd.set_option('precision', 3)

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('run_name', type=str)
    ap.add_argument('--data-dir', default='.', type=str)
    ap.add_argument('--save-dir', default='.', type=str)
    ap.add_argument('--plot-dir', default='.', type=str)
    ap.add_argument('--start-i', default=0, type=int)
    ap.add_argument('--end-i', default=None, type=int)
    args = ap.parse_args()

    root = 0
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()
    is_root = rank == root

    if size < 2:
        print "Error, at least one worker node required.\nStart with mpirun -n N_WORKER_NODES+1 bls_search.py"
        sys.exit(1)

    ## File IO node
    ## ------------
    if is_root:
        files = map(abspath, sorted(glob(join(args.data_dir,'*.fits'))))
        epics = array(map(lambda fn:int(basename(fn).split('_')[1]), files))	
        free_workers = range(1,size)
        active_workers = []

        all_items = files[args.start_i:args.end_i]
        items = copy(all_items)

        n_items = len(items)
        n_finished_items = 0

        pklname = join(args.save_dir, args.run_name+'_bls.pkl')
        hdfname = join(args.save_dir, args.run_name+'_bls.h5')

        def save(results):
            if len(results) > 2:
                with open(pklname, 'w') as fout:
                    dump(results, fout)
                hdf = pd.HDFStore(hdfname)
                hdf['planet_search'] = pd.DataFrame(np.hstack(results.values()))
                hdf.close()

        if exists(pklname):
            with (open(pklname, 'r')) as fin:
                results = load(fin)
        else:
            results = OrderedDict()

        time_last_save = time()
        while items or active_workers:
            ## Send an item
            while items and free_workers:
                w = free_workers.pop()
                comm.send(items.pop(), dest=w, tag=0)
                active_workers.append(w)

            ## Receive the results
            for w in active_workers:
                if comm.Iprobe(w, 2):
                    epic, res = comm.recv(source=w, tag=2)
                    results[epic] = res
                    free_workers.append(w)
                    active_workers.remove(w)
                    n_finished_items += 1
                    print "EPIC {:9d} {:3d}/{:3d}".format(epic, n_items,n_finished_items)
            
            if time() - time_last_save > 30:
                save(results)
                time_last_save = time()
            sleep(0.15)

        for w in free_workers:
            comm.send(-1, dest=w, tag=0)

        save(results)

    ## Worker node
    ## -----------
    else:
        while True:
            fname = comm.recv(source=root, tag=0)
            if fname == -1:
                break
            ts = TransitSearch(fname)
            ts()
            comm.send((ts.epic, ts.result), dest=root, tag=2)    

